-- Haskell Playground 1.0
myEnumFromTo 1 5


eftBool True False


eftInt 0 8

eftChar 'a' 'x'


takeWhile (/=' ') "ehllo world"
dropWhile (==' ') $ dropWhile (/=' ') "ehllo world"

myWords "all i wanna do is have some fun"


myLines sentences

-- main

myLines2 sentences

myWords2 "all i wanna do is have some fun"

mySqr

[ x | x <- mySqr, rem x 2 == 0]

[ (x, y) | x <- mySqr, y <- mySqr, x < 50, y < 50]

length [ (x, y) | x <- mySqr, y <- myCube, x < 50, y < 50]
take 1 [x^y | x <- [1..5], y<-[2, undefined]]

take 1 $ filter even[1,2,3, undefined]

itIsMystery "hello"

map (^2) [1..10]


map (`myPower` 2) [1..4]
map (2 `myPower`) [1..4]

map minimum [[1..10], [10..20], [20..30]]
map sum [[1..5], [1..5], [1..5]]

map (\x -> if x == 3 then (-x) else (x)) [1..10]


map (\x -> bool x (-x) (x==3)) [1..10]

filter ('a'==) "abracadabra"

filter (\x -> (rem x 3) == 0) [1..30]
length [x| x <- [1..30], (rem x 3) == 0]

filter (\x -> not $ elem x ["the", "a", "an"]) (words "the brown dig was a goof")


let (a:b) = [1,2,3]
a
b
 

myZip [1..10] ['a'..'d']

myZipWith (+) [0..10] [10..20]

myZip2 [1..10] ['a'..'d']

filter isUpper "HbEfLrLxO"

capitalise "julie"
capitalise2 "julie"

capitalise3 "julie"
capitalise4 "julie"
capitalise5 "julie"
capitalise6 "julie"

myOr [False, True, False]

myAny even [1,3,5]
myAny odd [1,3,5]

myElem 1 [1..10]
myElem 1 [2..10]

myElem2 1 [1..10]
myElem2 1 [2..10]

myReverse "blah"
myReverse [1..5]

squish [[1..5], [10..20]]

squishMap (\x -> [1,x,3]) [2]

squishMap (\x -> "WO " ++ [x] ++ " HOO ") "123"

squishAgain [[1..5], [10..20]]

compare 1 2

maximumBy (\_ _ -> GT) [1..10]
maximumBy (\_ _ -> LT) [1..10]
maximumBy compare [1..10]

myMaximumBy (\_ _ -> GT) [1..10]
myMaximumBy (\_ _ -> LT) [1..10]
myMaximumBy compare [1..10]

myMinimumBy (\_ _ -> GT) [1..10]
myMinimumBy (\_ _ -> LT) [1..10]
myMinimumBy compare [1..10]

myMaximum [1..10]
myMinimum [1..10]
