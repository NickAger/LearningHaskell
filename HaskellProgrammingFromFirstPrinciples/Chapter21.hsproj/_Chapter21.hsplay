-- Haskell Playground 1.0
import Data.Maybe

Just <$> [1..3]
flipType $ Just <$> [1..3]
sequenceA $ Just <$> [1..3]
sequenceA [Just 1, Just 2, Nothing]

catMaybes [Just 1, Just 2, Just 3]
catMaybes [Just 1, Just 2, Nothing]


let xs = [Just 1, Just 2, Just 3, Nothing]

sum $ catMaybes xs
fmap sum $ sequenceA xs

traverse Just      [1, 2, 3]
--       (a -> f b)    t a   -> f (t b)
-- class (Functor t, Foldable t) => Traversable t

-- equivalent to:

sequenceA $ (fmap Just) [1..3]
sequenceA . fmap Just $ [1..3]

-- general idea is that anytime you’re using sequenceA . fmap f, you can use traverse to achieve the same result in one step


sequenceA [Just 1, Just 2, Nothing]
sequenceA [Just 1, Just 2, Just 3]
-- flipType only works for arrays, sequenceA works
-- for all Transverable types
flipType [Just 1, Just 2, Just 3]

-- 21.5 So, what’s traversable for

let f = undefined :: a -> Maybe b
let xs = undefined :: [a]

-- :t map f xs
-- map f xs :: [Maybe b]

-- But what if we want a value of type Maybe [b]? The following will work, but we can do better:

-- :t sequenceA $ map f xs
-- sequenceA $ map f xs :: Maybe [a]

-- It’s usually better to use traverse whenever we see a sequence or sequenceA combined with a map or fmap:

-- :t traverse f xs
-- traverse f xs :: Maybe [b]
