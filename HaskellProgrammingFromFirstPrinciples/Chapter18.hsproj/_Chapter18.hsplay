-- Haskell Playground 1.0
import Control.Applicative

-- can define fmap in terms of monad
-- fmap f xs == xs >>= return . f
fmap (+1) [1..3]
[1..3] >>= return . (+1)

let andOne x = [x, 1]
andOne 10

fmap andOne [4,5,6]
concat $ fmap andOne [4,5,6]

[4,5,6] >>= andOne

bind andOne [4,5,6]

liftA2 (,) (Just 3) (Just 5)
liftM2 (,) (Just 3) (Just 5)

zipWith (+) [3,4] [5,6]
liftA2 (+) [3,4] [5,6]

liftM3 (,,) [1, 2] [3] [5, 6]
zipWith3 (,,) [1, 2] [3] [5, 6]

putStrLn "Hello, " >> putStrLn "World!"

putStrLn "Hello, " *> putStrLn "World!"


let printOne = putStrLn "1"
let printTwo = putStrLn "2"

let twoActions = (printOne, printTwo)
fst twoActions
snd twoActions
fst twoActions

