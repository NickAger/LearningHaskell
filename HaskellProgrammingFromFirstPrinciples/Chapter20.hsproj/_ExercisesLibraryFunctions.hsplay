-- Haskell Playground 1.0
sum $ Just 1
sum [1,2,3,4,5]

product $ Just 1
product [1,2,3,4,5]

elem 2 (Just 3)

elem True (Left False)
elem True (Left True)

elem True (Right False)
elem True (Right True)

fmap (elem 3) [Right 1, Right 2, Right 3]

maximum [10,12,33,5]
fmap maximum [Just 2, Just 10, Just 4]
fmap maximum $ Just [3,7,10,2]

minimum "julie"
fmap minimum $ Just "julie"
fmap minimum [Just 'j', Just 'u', Just 'l']

fmap minimum [Just 4, Just 3, Nothing]

minimum $ Left 3

fmap (>10) $ Just 2

null (Left 3)
null []

null Nothing
null (1,2)
fmap null [Just 1, Just 2, Nothing]

length (1,2)
length [(1,2), (3,4), (5,6)]
fmap length [(1,2), (3,4), (5,6)]

length $ Just [1,2,3]
fmap length Just [1,2,3] -- the a of Just a in this case is a list, and there is only one list
-- see comment opposite.
fmap length $ Just [1,2,3]
fmap length [Just 1, Just 2, Just 3]
fmap length [Just 1, Just 2, Nothing]

fmap length Just
length [1..4]

toList $ Just 1
toList [Just 1, Just 2, Just 3]
map toList [Just 1, Just 2, Just 3]
concatMap toList [Just 1, Just 2, Just 3]
concatMap toList [Just 1, Just 2, Nothing]
toList (1,2)
toList Nothing

fold ["hello", " julie"]

-- Unlike fold, foldMap has a function as its first element
-- the first (function) argument of foldMap must explicitly map each element of the structure to a Monoid:
foldMap Sum [1..5]
foldMap Product [1..5]

foldMap All [True, False, True]
foldMap Any [True, False, True]

foldMap All [(3==4), (9 > 5)]
foldMap Any [(3==4), (9 > 5)]

foldMap First [Just 1, Nothing, Just 5]
foldMap Last [Just 1, Nothing, Just 5]

-- foldMap can also have a function to map that is different from the Monoid itâ€™s using
foldMap (*5) [1, 2, 3 :: Product Integer]
foldMap (*5) [1, 2, 3 :: Sum Integer]
