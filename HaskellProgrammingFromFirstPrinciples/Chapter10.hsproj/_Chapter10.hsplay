-- Haskell Playground 1.0
foldr (flip const) 0 [1..5]
foldr const 0 [1..5]
foldl (flip const) 0 [1..5]
foldl const 0 [1..5]

foldr (*) 1 [1..5]
foldr (flip (*)) 1 [1..5]
foldl (flip (*)) 1 [1..5]
foldl (*) 1 [1..5]

let f = (\x y -> concat["(", x, " * ", y, ")"])
foldr f "1" (map show [2..4])
foldr (flip f) "1" (map show [2..4])
foldl f "1" (map show [2..4])
foldl (flip f) "1" (map show [2..4])

-- foldr (flip (*)) 1 [1..3]
-- (foldr (*) 1 [2..3]) * 1
-- ((foldr (*) 1 [3]) * 2) * 1
-- ((1 * 3) * 2) * 1


4 ^ 3 ^ 2   -- right associative
4 ^ (3 ^ 2) -- right associative
(4 ^ 3) ^ 2 -- left associative

let a = [1,2,undefined]
foldr const 0 a
foldl (flip const) 0 a

foldr (++) "" ["woot", "WOOT", "woot"]
foldr max 'a' "fear is the little death"
foldr (&&) True [False, True]
foldr (||) False [False, True]
foldl (flip ((++) . show)) "" [1..5]
foldr const 'a' ['1'..'5']
foldr const '0' "tacos"
foldl (flip const) '0' "burritos"
foldl (flip const) 'z' ['1'..'5']

secondsToDiffTime 34123

filterDbDate theDatabase
filterDbNumber theDatabase

mostRecent theDatabase
sumDb theDatabase
avgDb theDatabase

fibs1
fibs2

stopVowelsStops

stopVowelsStops2
nounVerbNouns


seekritFunction "hello world will this work?"

myOr [False, False, True]
myAny even [1,3,5]
myAny odd [1,3,5]

myElem 1 [1..10]
myElem 1 [2..10]

myElem2 1 [1..10]
myElem2 1 [2..10]

myReverse [1..5]

myMap show [1..5]

myFilter (>5) [1..10]

squish [[1,2,3],[4,5,6],[7,8,9]]

squishMap (\x -> [1, x, 3]) [2]
squishMap (\x -> "WO " ++ [x] ++ " OT ") "blah"

squishAgain [[1,2,3],[4,5,6],[7,8,9]]

myMaximumBy (\_ _ -> GT) [1..10]
myMaximumBy (\_ _ -> LT) [1..10]
myMaximumBy compare [1..10]


myMinimumBy (\_ _ -> GT) [1..10]
myMinimumBy (\_ _ -> LT) [1..10]
myMinimumBy compare [1..10]
